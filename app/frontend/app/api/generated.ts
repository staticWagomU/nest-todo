/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Todo API
 * Todo application API documentation
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import useSwr from 'swr';
import type { Arguments, Key, SWRConfiguration } from 'swr';

import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';

export interface CreateTodoDto {
  /**
   * TODO のタイトル
   * @minLength 3
   */
  title: string;
  /** TODO の詳細説明 */
  description?: string;
  /** TODO の完了状態 */
  completed?: boolean;
}

export interface Todo {
  /** TODO の一意識別子 */
  id: string;
  /** TODO のタイトル */
  title: string;
  /** TODO の詳細説明 */
  description?: string;
  /** TODO の完了状態 */
  completed: boolean;
}

export interface UpdateTodoDto {
  /**
   * TODO のタイトル
   * @minLength 3
   */
  title?: string;
  /** TODO の詳細説明 */
  description?: string;
  /** TODO の完了状態 */
  completed?: boolean;
}

export type TodosControllerRemove200 = {
  message?: string;
};

/**
 * TODOアイテムを新規作成します
 * @summary 新しいTODOを作成
 */
export const todosControllerCreate = (
  createTodoDto: CreateTodoDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Todo>> => {
  return axios.post('/api/v1/todos', createTodoDto, options);
};

export const getTodosControllerCreateMutationFetcher = (options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: CreateTodoDto }): Promise<AxiosResponse<Todo>> => {
    return todosControllerCreate(arg, options);
  };
};
export const getTodosControllerCreateMutationKey = () => ['/api/v1/todos'] as const;

export type TodosControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof todosControllerCreate>>
>;
export type TodosControllerCreateMutationError = AxiosError<void>;

/**
 * @summary 新しいTODOを作成
 */
export const useTodosControllerCreate = <TError = AxiosError<void>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof todosControllerCreate>>,
    TError,
    Key,
    CreateTodoDto,
    Awaited<ReturnType<typeof todosControllerCreate>>
  > & { swrKey?: string };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getTodosControllerCreateMutationKey();
  const swrFn = getTodosControllerCreateMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * 登録されている全てのTODOアイテムを取得します
 * @summary 全てのTODOを取得
 */
export const todosControllerFindAll = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Todo[]>> => {
  return axios.get('/api/v1/todos', options);
};

export const getTodosControllerFindAllKey = () => ['/api/v1/todos'] as const;

export type TodosControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof todosControllerFindAll>>
>;
export type TodosControllerFindAllQueryError = AxiosError<unknown>;

/**
 * @summary 全てのTODOを取得
 */
export const useTodosControllerFindAll = <TError = AxiosError<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof todosControllerFindAll>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  axios?: AxiosRequestConfig;
}) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey = swrOptions?.swrKey ?? (() => (isEnabled ? getTodosControllerFindAllKey() : null));
  const swrFn = () => todosControllerFindAll(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * IDを指定してTODOアイテムを取得します
 * @summary 特定のTODOを取得
 */
export const todosControllerFindOne = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Todo>> => {
  return axios.get(`/api/v1/todos/${id}`, options);
};

export const getTodosControllerFindOneKey = (id: string) => [`/api/v1/todos/${id}`] as const;

export type TodosControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof todosControllerFindOne>>
>;
export type TodosControllerFindOneQueryError = AxiosError<void>;

/**
 * @summary 特定のTODOを取得
 */
export const useTodosControllerFindOne = <TError = AxiosError<void>>(
  id: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof todosControllerFindOne>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    axios?: AxiosRequestConfig;
  }
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!id;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getTodosControllerFindOneKey(id) : null));
  const swrFn = () => todosControllerFindOne(id, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * IDを指定してTODOアイテムを部分更新します
 * @summary TODOを更新
 */
export const todosControllerUpdate = (
  id: string,
  updateTodoDto: UpdateTodoDto,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Todo>> => {
  return axios.patch(`/api/v1/todos/${id}`, updateTodoDto, options);
};

export const getTodosControllerUpdateMutationFetcher = (
  id: string,
  options?: AxiosRequestConfig
) => {
  return (_: Key, { arg }: { arg: UpdateTodoDto }): Promise<AxiosResponse<Todo>> => {
    return todosControllerUpdate(id, arg, options);
  };
};
export const getTodosControllerUpdateMutationKey = (id: string) => [`/api/v1/todos/${id}`] as const;

export type TodosControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof todosControllerUpdate>>
>;
export type TodosControllerUpdateMutationError = AxiosError<void>;

/**
 * @summary TODOを更新
 */
export const useTodosControllerUpdate = <TError = AxiosError<void>>(
  id: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof todosControllerUpdate>>,
      TError,
      Key,
      UpdateTodoDto,
      Awaited<ReturnType<typeof todosControllerUpdate>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  }
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getTodosControllerUpdateMutationKey(id);
  const swrFn = getTodosControllerUpdateMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * IDを指定してTODOアイテムを削除します
 * @summary TODOを削除
 */
export const todosControllerRemove = (
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TodosControllerRemove200>> => {
  return axios.delete(`/api/v1/todos/${id}`, options);
};

export const getTodosControllerRemoveMutationFetcher = (
  id: string,
  options?: AxiosRequestConfig
) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<TodosControllerRemove200>> => {
    return todosControllerRemove(id, options);
  };
};
export const getTodosControllerRemoveMutationKey = (id: string) => [`/api/v1/todos/${id}`] as const;

export type TodosControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof todosControllerRemove>>
>;
export type TodosControllerRemoveMutationError = AxiosError<void>;

/**
 * @summary TODOを削除
 */
export const useTodosControllerRemove = <TError = AxiosError<void>>(
  id: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof todosControllerRemove>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof todosControllerRemove>>
    > & { swrKey?: string };
    axios?: AxiosRequestConfig;
  }
) => {
  const { swr: swrOptions, axios: axiosOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getTodosControllerRemoveMutationKey(id);
  const swrFn = getTodosControllerRemoveMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
